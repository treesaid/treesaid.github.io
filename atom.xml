<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Memory 〆</title>
  
  <subtitle>Once reality now it’s just a memory.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xjnblog.site/"/>
  <updated>2017-09-27T03:24:52.000Z</updated>
  <id>http://xjnblog.site/</id>
  
  <author>
    <name>XuJianing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue2.0中的transition动画</title>
    <link href="http://xjnblog.site/2017/09/27/vue2-0%E4%B8%AD%E7%9A%84transition%E5%8A%A8%E7%94%BB/"/>
    <id>http://xjnblog.site/2017/09/27/vue2-0中的transition动画/</id>
    <published>2017-09-27T03:03:55.000Z</published>
    <updated>2017-09-27T03:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>总括：</strong> transition 之前只是作为元素的一个属性，到了2.0以后 transition成为了一个组件，也就意味着有更多的功能<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;transition name=<span class="string">"fade"</span>&gt;</div><div class="line">    运动的东西(html元素、属性、路由...)</div><div class="line">&lt;/transition&gt;</div></pre></td></tr></table></figure></p><h4 id="class定义："><a href="#class定义：" class="headerlink" title="class定义："></a>class定义：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.fade-enter-active,.fade-leave-active&#123;</div><div class="line">    transition:1s all ease;</div><div class="line">&#125;</div><div class="line">.fade-enter-active&#123;     //变成什么样子-&gt;当元素出来（显示）</div><div class="line">    opactiy:1;</div><div class="line">    width:300px;</div><div class="line">    height:300px;</div><div class="line">&#125;  </div><div class="line">.fade-leave-active&#123;      //当元素离开（消失）</div><div class="line">    width:100px;</div><div class="line">    height:100px;</div><div class="line">    opacity:0</div><div class="line">&#125;</div><div class="line">.fade-enter, .fade-leave&#123;           //初始的状态</div><div class="line">    width:100px;</div><div class="line">    height:100px;</div><div class="line">    opacity:0</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="transition-相关函数的接口"><a href="#transition-相关函数的接口" class="headerlink" title="transition 相关函数的接口"></a>transition 相关函数的接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">methods:&#123;</div><div class="line">    afterLeave(el)&#123;</div><div class="line">        el.style.background:<span class="string">'red'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@before-enter=<span class="string">"beforEnter"</span>   动画enter之前</div><div class="line">@enter=<span class="string">"enter"</span>               动画enter</div><div class="line">@afterEnter=<span class="string">"afterEnter"</span>     动画enter之后</div><div class="line">@before-leave=<span class="string">"beforeLeave"</span>  动画leave之前</div><div class="line">@leave=<span class="string">"leave"</span>               动画leave</div><div class="line">@afterLeave=<span class="string">"afterLeave"</span>     动画leave之后</div><div class="line">&lt;transition name=<span class="string">"fade"</span> @before-enter=<span class="string">"beforeEnter"</span> @enter=<span class="string">"enter"</span> @after-enter=<span class="string">"afterEnter"</span> &gt;</div><div class="line"></div><div class="line">&lt;/transition&gt;</div></pre></td></tr></table></figure><h4 id="如何配合animate-css-使用"><a href="#如何配合animate-css-使用" class="headerlink" title="如何配合animate.css 使用"></a>如何配合animate.css 使用</h4><p>详细的动画效果参考：<a href="https://daneden.github.io/animate.css/" target="_blank" rel="external">Animate.css官网</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"animate.css"</span> /&gt;</div><div class="line">&lt;transition enter-active-class=<span class="string">"bounceInLeft"</span> leave-active-class=<span class="string">"bounceOutRight"</span>&gt;</div><div class="line">    &lt;p class=<span class="string">"animtaed"</span>&gt;&lt;/p&gt;</div><div class="line">&lt;/transition&gt;</div><div class="line">//放大效果 zoomInLeft  zoomOutRight</div></pre></td></tr></table></figure></p><p><strong>注意</strong>：必须给<code>transition</code>里面包裹的运动元素添加 <code>animated</code>class 才可以</p><h4 id="transition-多个元素运动"><a href="#transition-多个元素运动" class="headerlink" title="transition 多个元素运动"></a>transition 多个元素运动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;transition-group enter-active-class=<span class="string">"bounceInLeft"</span> leave-active-class=<span class="string">"bounceOutRight"</span>&gt;</div><div class="line">    &lt;p :key=<span class="string">"1"</span>&gt;&lt;/p&gt;</div><div class="line">    &lt;p :key=<span class="string">"2"</span>&gt;&lt;/p&gt; </div><div class="line">&lt;/transition-group&gt;</div></pre></td></tr></table></figure><h4 id="完整实例code"><a href="#完整实例code" class="headerlink" title="完整实例code"></a>完整实例code</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;vue2.0中的transition动画&lt;/title&gt;</div><div class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"apple-mobile-web-app-capable"</span> content=<span class="string">"yes"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"apple-mobile-web-app-status-bar-style"</span> content=<span class="string">"black"</span>&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        p&#123;</div><div class="line">            width:300px;</div><div class="line">            height:300px;</div><div class="line">            background: red;</div><div class="line">        &#125;</div><div class="line">        .fade-enter-active, .fade-leave-active&#123;</div><div class="line">            transition: 1s all ease;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        .fade-enter-active&#123;</div><div class="line">            opacity:1;</div><div class="line">            width:300px;</div><div class="line">            height:300px;</div><div class="line">        &#125;</div><div class="line">        .fade-leave-active&#123;</div><div class="line">            opacity:0;</div><div class="line">            width:100px;</div><div class="line">            height:100px;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        .fade-enter,.fade-leave&#123;</div><div class="line">            opacity:0;</div><div class="line">            width:100px;</div><div class="line">            height:100px;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">    &lt;script src=<span class="string">"vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        window.onload=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            new Vue(&#123;</div><div class="line">                el:<span class="string">'#box'</span>,</div><div class="line">                data:&#123;</div><div class="line">                    show:<span class="literal">false</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"box"</span>&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"点击显示隐藏"</span> @click=<span class="string">"show=!show"</span>&gt;</div><div class="line"></div><div class="line">        &lt;transition name=<span class="string">"fade"</span>&gt;</div><div class="line">            &lt;p v-show=<span class="string">"show"</span>&gt;&lt;/p&gt;</div><div class="line">        &lt;/transition&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;总括：&lt;/strong&gt; transition 之前只是作为元素的一个属性，到了2.0以后 transition成为了一个组件，也就意味着有更多的功能&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="vue" scheme="http://xjnblog.site/categories/vue/"/>
    
    
      <category term="vue" scheme="http://xjnblog.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS居中小谈</title>
    <link href="http://xjnblog.site/2017/09/27/CSS%E5%B1%85%E4%B8%AD%E5%B0%8F%E8%B0%88/"/>
    <id>http://xjnblog.site/2017/09/27/CSS居中小谈/</id>
    <published>2017-09-27T01:54:17.000Z</published>
    <updated>2017-09-27T02:08:36.798Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>总括：</strong> CSS居中一直是一个比较敏感的话题，为了以后开发的方便，楼主觉得确实需要总结一下了，总的来说，居中问题分为垂直居中和水平居中，实际上水平居中是很简单的，但垂直居中的方式和方法就千奇百怪了。  </p><h3 id="内联元素居中方案"><a href="#内联元素居中方案" class="headerlink" title="内联元素居中方案"></a>内联元素居中方案</h3><h4 id="水平居中设置："><a href="#水平居中设置：" class="headerlink" title="水平居中设置："></a>水平居中设置：</h4><p><strong>行内元素</strong> 设置 <code>text-align:center</code>；<br><strong>Flex布局</strong> 设置父元素<code>display:flex;justify-content:center;</code>(灵活运用)<br><a id="more"></a></p><h4 id="垂直居中设置："><a href="#垂直居中设置：" class="headerlink" title="垂直居中设置："></a>垂直居中设置：</h4><p>父元素高度确定的单行文本（内联元素） 设置 <code>height = line-height</code>；  </p><p>父元素高度确定的多行文本（内联元素）<br>a:插入 table （插入方法和水平居中一样），然后设置<code>vertical-align:middle</code>；<br>b:先设置 <code>display:table-cell</code> 再设置 <code>vertical-align:middle</code>；</p><h3 id="块级元素居中方案"><a href="#块级元素居中方案" class="headerlink" title="块级元素居中方案"></a>块级元素居中方案</h3><h4 id="水平居中设置：-1"><a href="#水平居中设置：-1" class="headerlink" title="水平居中设置："></a>水平居中设置：</h4><p>定宽块状元素 设置 左右 <code>margin</code> 值为 <code>auto</code>；</p><p>不定宽块状元素  </p><ul><li>a:在元素外加入 <code>table</code> 标签（完整的，包括 table、tbody、tr、td），该元素写在 td 内，然后设置 <code>margin</code> 的值为 <code>auto</code>；</li><li>b:给该元素设置 <code>display:inine</code> 方法；</li><li>c:父元素设置 <code>position:relative</code> 和 <code>left:50%</code>，子元素设置 <code>position:relative</code> 和 <code>left:50%</code>；</li></ul><h4 id="垂直居中设置：-1"><a href="#垂直居中设置：-1" class="headerlink" title="垂直居中设置："></a>垂直居中设置：</h4><ol><li><p>使用position:absolute（fixed）,设置left、top、margin-left、margin-top的属性(定高);</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">    width: 200px;</div><div class="line">    height: 200px;</div><div class="line">    background: red;</div><div class="line">    position: absolute;/*或fixed*/</div><div class="line">    top: 50%;</div><div class="line">    left: 50%;</div><div class="line">    margin-top: -100px;</div><div class="line">    margin-left: -100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>利用position:fixed（absolute）属性，margin:auto这个必须不要忘记了(不定高不定宽); </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width: 100px;</div><div class="line">    height: 100px;</div><div class="line">    background: red;</div><div class="line">    position: absolute;/*或fixed*/</div><div class="line">    top:0;</div><div class="line">    right:0;</div><div class="line">    bottom:0;</div><div class="line">    left:0;</div><div class="line">    margin: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>利用display:table-cell属性使内容垂直居中,这个方法在多行文字居中的时候用的比较多;<br>HTML代码：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"box"</span>&gt;</div><div class="line">    &lt;span&gt;多行文字，此处居中设置&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p> CSS代码：  </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    display: table-cell;</div><div class="line">    vertical-align: middle;</div><div class="line">    text-align: center;</div><div class="line">    width: 100px;</div><div class="line">    height: 120px;</div><div class="line">    background: purple;</div><div class="line">&#125;</div><div class="line">.box span&#123;</div><div class="line">    display: inline-block;</div><div class="line">    vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>使用css3的新属性transform:translate(x,y)属性(不定高，不定宽);<br>HTML代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">'box'</span>&gt;</div><div class="line">    垂直居中</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p> CSS代码:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    position: absolute;</div><div class="line">    top:50%;</div><div class="line">    left:50%;</div><div class="line">    transform: translate(-50%,-50%);</div><div class="line">    -webkit-transform: translate(-50%,-50%);</div><div class="line">    -moz-transform: translate(-50%,-50%);</div><div class="line">    -ms-transform: translate(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>使用before，after伪元素(定高不定宽);<br>HTML代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">'box'</span>&gt;</div><div class="line">    &lt;div class=<span class="string">'content'</span>&gt;</div><div class="line">        垂直居中</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p> CSS代码：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    display: block;</div><div class="line">    background: rgba(0,0,0,.5);</div><div class="line">    height: 100px;</div><div class="line">&#125;</div><div class="line">.content::before&#123;</div><div class="line">    content: <span class="string">''</span>;</div><div class="line">    display: block;</div><div class="line">    vertical-align: middle;</div><div class="line">    height: 100%;</div><div class="line">&#125;</div><div class="line">.content::after&#123;</div><div class="line">    content: <span class="string">''</span>;</div><div class="line">    display: block;</div><div class="line">    vertical-align: middle;</div><div class="line">    height: 100%;</div><div class="line">&#125;</div><div class="line">.box .content&#123;</div><div class="line">    height: 33px;</div><div class="line">    line-height: 33px;</div><div class="line">    text-align: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Flex布局(不定高，不定宽);</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    display: -webkit-box;</div><div class="line">    display: -webkit-flex;</div><div class="line">    display: -moz-box;</div><div class="line">    display: -moz-flex;</div><div class="line">    display: -ms-flexbox;</div><div class="line">    display: flex;</div><div class="line">    /*水平居中*/</div><div class="line">    -webkit-box-align: center;</div><div class="line">    -moz-box-align: center;</div><div class="line">    -ms-flex-pack:center;</div><div class="line">    -webkit-justify-content: center;</div><div class="line">    -moz-justify-content: center;</div><div class="line">    justify-content: center;</div><div class="line">    /*垂直居中*/</div><div class="line">    -webkit-box-pack: center;</div><div class="line">    -moz-box-pack: center;</div><div class="line">    -ms-flex-align:center;</div><div class="line">    -webkit-align-items: center;</div><div class="line">    -moz-align-items: center;</div><div class="line">    align-items: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;总括：&lt;/strong&gt; CSS居中一直是一个比较敏感的话题，为了以后开发的方便，楼主觉得确实需要总结一下了，总的来说，居中问题分为垂直居中和水平居中，实际上水平居中是很简单的，但垂直居中的方式和方法就千奇百怪了。  &lt;/p&gt;
&lt;h3 id=&quot;内联元素居中方案&quot;&gt;&lt;a href=&quot;#内联元素居中方案&quot; class=&quot;headerlink&quot; title=&quot;内联元素居中方案&quot;&gt;&lt;/a&gt;内联元素居中方案&lt;/h3&gt;&lt;h4 id=&quot;水平居中设置：&quot;&gt;&lt;a href=&quot;#水平居中设置：&quot; class=&quot;headerlink&quot; title=&quot;水平居中设置：&quot;&gt;&lt;/a&gt;水平居中设置：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;行内元素&lt;/strong&gt; 设置 &lt;code&gt;text-align:center&lt;/code&gt;；&lt;br&gt;&lt;strong&gt;Flex布局&lt;/strong&gt; 设置父元素&lt;code&gt;display:flex;justify-content:center;&lt;/code&gt;(灵活运用)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://xjnblog.site/categories/css/"/>
    
    
      <category term="css" scheme="http://xjnblog.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>ES6常见用法总结</title>
    <link href="http://xjnblog.site/2017/09/26/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://xjnblog.site/2017/09/26/ES6学习笔记/</id>
    <published>2017-09-26T09:40:15.000Z</published>
    <updated>2017-09-27T02:15:06.869Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="什么是ECMA？"><a href="#什么是ECMA？" class="headerlink" title="什么是ECMA？"></a>什么是ECMA？</h4><p>ECMA是标准，js是实现<br>类似HTML5是标准，IE10，chrom，FF都是实现 </p><h4 id="目前版本："><a href="#目前版本：" class="headerlink" title="目前版本："></a>目前版本：</h4><p>低级浏览器：主要支持ES3.1<br>高级浏览器：正在从ES5过渡到ES6<br><a id="more"></a></p><h4 id="历史："><a href="#历史：" class="headerlink" title="历史："></a>历史：</h4><blockquote><ol><li>1996 ES1.0   js稳定  Netscape将js提供给ECMA组织，ES正式出现  </li><li>1998 ES2.0    ES2.0正式发布  </li><li>1999 ES3.0    ES3被浏览器被广泛支持  </li><li>2007 ES4.0    ES4过于激进，被废除了  </li><li>2008 ES3.1    4.0退化为严重缩水版的3.1，代号Harmony（和谐）  </li><li>2009 ES5.0    ES5.0正式发布 ，同时公布了Javascript.next也就是后来的6.0  </li><li>2011 ES5.1    ES5.1成为ISO国际标准  </li><li>2013 ES6.0    ES6.0 制定草案  </li><li>2013.12  ES6.0  ES6.0草案发布    </li><li>2015.6 ES6.0    ES6.0预计发布正式版，同时JavaScript.next指向ES7.0  </li></ol></blockquote><h4 id="兼容性："><a href="#兼容性：" class="headerlink" title="兼容性："></a>兼容性：</h4><p>目前为止 ES5 ES6支持情况，凑合<br>nodejs用的就是chrom内核，在node中可以使用ES5 ES6很多特性<br>ES5 和 ES6 已经逐渐沦为后台语言   </p><h4 id="在浏览器里如何使用"><a href="#在浏览器里如何使用" class="headerlink" title="在浏览器里如何使用?"></a>在浏览器里如何使用?</h4><ul><li>需要用到编译工具<code>babel</code></li><li>traceur —由Google出的编辑器，把ES6语法编译为ES5</li><li>bootstrap   引导程序，跟css里面认识bootstrap不一样</li></ul><h4 id="在网页上使用"><a href="#在网页上使用" class="headerlink" title="在网页上使用"></a>在网页上使用</h4><ul><li><p>用法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"traceur.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"bootstrap.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"module"</span>&gt;      </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></li><li><p>用法二：<br>直接在线编译—主要用于测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bable:http://babeljs.io/repl/</div></pre></td></tr></table></figure></li><li><p>用法三：<br>直接在node里面使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a). 直接用，需要添加 <span class="string">'use strict'</span></div><div class="line">b). node --harmoney_destructuring 1.js</div></pre></td></tr></table></figure></li></ul><hr><h3 id="新增常用语法"><a href="#新增常用语法" class="headerlink" title="新增常用语法"></a>新增常用语法</h3><h5 id="1-定义变量-let-已经被浏览器实现了"><a href="#1-定义变量-let-已经被浏览器实现了" class="headerlink" title="1.定义变量 let 已经被浏览器实现了"></a>1.定义变量 let 已经被浏览器实现了</h5><p><strong><code>let</code></strong> —用来去定义变量  </p><ul><li>代码块：{}包起来的代码，形成了一个作用域，块级作用域<br>比如 <code>if</code> 、<code>for</code>、<code>while</code>  </li><li><p>特点:只能在代码块里面使用<br>var 只有函数作用域  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a). <span class="built_in">let</span> 具备块级作用域</div><div class="line">b). 不允许重复声明</div><div class="line">    <span class="built_in">let</span> a =12;</div><div class="line">    <span class="built_in">let</span> a =5;   //错误</div></pre></td></tr></table></figure><p>  总结：其实let才接近其他语言的变量    </p></li><li><p>用处：<br>封闭空间：（匿名函数自调用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    var a=12;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure><p>  现在：  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="built_in">let</span> a=12;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  <strong>i值问题:</strong>  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">之前的解决办法：</div><div class="line">   var aBtn=document.getElementsByTagName(<span class="string">'input'</span>)</div><div class="line">   <span class="keyword">for</span>(var i=0;i&lt;aBtn.length;i++)&#123;</div><div class="line">       (<span class="keyword">function</span>(i)&#123;</div><div class="line">           aBtn[i].onclick=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">               alert(i)</div><div class="line">           &#125;</div><div class="line">       &#125;)(i)</div><div class="line">   &#125;</div></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">es6 <span class="built_in">let</span>解决办法：</div><div class="line">    var aBtn=document.getElementsByTagName(<span class="string">'input'</span>)</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">let</span> i=0;i&lt;aBtn.length;i++)&#123;</div><div class="line">            aBtn[i].onclick=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                alert(i)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>  总结: 块级作用域，其实就是匿名函数自调用</p></li></ul><h5 id="2-const-—用来定义-常量"><a href="#2-const-—用来定义-常量" class="headerlink" title="2. const —用来定义 常量"></a>2. const —用来定义 常量</h5><p>一旦赋值，以后再也修改不了了</p><ul><li>注意：const必须给初始值 ，不能重复声明<br>因为以后再也没办法赋值了，所以声明的时候一定得有值</li><li>作用：为了防止意外修改变量<br>比如引入库名，组件名</li></ul><h5 id="3-字符串连接："><a href="#3-字符串连接：" class="headerlink" title="3.字符串连接："></a>3.字符串连接：</h5><p><strong>之前：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str=<span class="string">""</span>;</div><div class="line">var str=<span class="string">''</span>;</div></pre></td></tr></table></figure></p><p><strong>反单引号：</strong> var str=`` 字符串模板<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">之前: <span class="string">"abc'+变量名+'ef"</span></div><div class="line">现在：`abc<span class="variable">$&#123;变量名&#125;</span>ef`</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h4 id=&quot;什么是ECMA？&quot;&gt;&lt;a href=&quot;#什么是ECMA？&quot; class=&quot;headerlink&quot; title=&quot;什么是ECMA？&quot;&gt;&lt;/a&gt;什么是ECMA？&lt;/h4&gt;&lt;p&gt;ECMA是标准，js是实现&lt;br&gt;类似HTML5是标准，IE10，chrom，FF都是实现 &lt;/p&gt;
&lt;h4 id=&quot;目前版本：&quot;&gt;&lt;a href=&quot;#目前版本：&quot; class=&quot;headerlink&quot; title=&quot;目前版本：&quot;&gt;&lt;/a&gt;目前版本：&lt;/h4&gt;&lt;p&gt;低级浏览器：主要支持ES3.1&lt;br&gt;高级浏览器：正在从ES5过渡到ES6&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xjnblog.site/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://xjnblog.site/tags/ES6/"/>
    
      <category term="js" scheme="http://xjnblog.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue中keep-alive用法</title>
    <link href="http://xjnblog.site/2017/09/26/vue%E4%B8%ADkeep-alive%E7%94%A8%E6%B3%95/"/>
    <id>http://xjnblog.site/2017/09/26/vue中keep-alive用法/</id>
    <published>2017-09-26T09:36:10.000Z</published>
    <updated>2017-09-26T09:38:34.045Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="路由开启keep-alive时的注意点"><a href="#路由开启keep-alive时的注意点" class="headerlink" title="路由开启keep-alive时的注意点"></a>路由开启keep-alive时的注意点</h3><p>因为原文已经写得很详细了，我这里就不在赘述了。<br><strong>原文地址:</strong><a href="http://xiangsongtao.com/article/5853b2c0044bf1353af82fbf" target="_blank" rel="external">http://xiangsongtao.com/article/5853b2c0044bf1353af82fbf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;路由开启keep-alive时的注意点&quot;&gt;&lt;a href=&quot;#路由开启keep-alive时的注意点&quot; class=&quot;headerlink&quot; title=&quot;路由开启keep-alive时的注意点&quot;&gt;&lt;/a&gt;路由开启keep-alive时的注意点&lt;/h3&gt;
      
    
    </summary>
    
      <category term="vue" scheme="http://xjnblog.site/categories/vue/"/>
    
    
      <category term="vue" scheme="http://xjnblog.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Less常见用法</title>
    <link href="http://xjnblog.site/2017/09/26/Less%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/"/>
    <id>http://xjnblog.site/2017/09/26/Less常见用法/</id>
    <published>2017-09-26T09:21:18.000Z</published>
    <updated>2017-09-26T09:39:09.396Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="1-在less中引入另一个less文件"><a href="#1-在less中引入另一个less文件" class="headerlink" title="1.在less中引入另一个less文件"></a>1.在less中引入另一个less文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import <span class="string">"ku"</span>;    //引入的是（ku.less）文件;</div></pre></td></tr></table></figure><p><strong>在less中引入一个css文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import(less) <span class="string">"a.css"</span>;</div></pre></td></tr></table></figure></p><a id="more"></a><h4 id="2-嵌套规则（less中最有意思的部分"><a href="#2-嵌套规则（less中最有意思的部分" class="headerlink" title="2.嵌套规则（less中最有意思的部分)"></a>2.嵌套规则（less中最有意思的部分)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">.ul&#123;    </div><div class="line">  width:600px;  </div><div class="line">  margin: 30px auto;  </div><div class="line">  padding: 0;   </div><div class="line">  list-style:none;  </div><div class="line">  li&#123;  </div><div class="line">     height: 30px;  </div><div class="line">     background: pink; </div><div class="line">     line-height: 30px; </div><div class="line">     margin-bottom: 5px;  </div><div class="line">     padding: 0 10px; </div><div class="line">  &#125;  </div><div class="line">  a&#123;    </div><div class="line">        <span class="built_in">float</span>: left;</div><div class="line">        //&amp;代表上一级选择器</div><div class="line">         &amp;:hover&#123;</div><div class="line">            color:<span class="comment">#000;</span></div><div class="line">           &#125;</div><div class="line">     &#125;   </div><div class="line">  span&#123;  </div><div class="line">       <span class="built_in">float</span>: right;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-混合的用法（也很常用）"><a href="#3-混合的用法（也很常用）" class="headerlink" title="3.混合的用法（也很常用）"></a>3.混合的用法（也很常用）</h4><ul><li><p>.border-01{border:2px solid @ccc}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">调用：.<span class="built_in">test</span>-hunhe&#123;.border-01;width:200px;height:200px&#125;</div></pre></td></tr></table></figure></li><li><p>.border-02(@w){border:@w solid #ccc}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">调用：.<span class="built_in">test</span>-hunhe&#123;.border-02(10px),width:200px;height:200px&#125;</div></pre></td></tr></table></figure></li><li><p>.border-03(@w:10px){border:@w solid #ccc}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">调用：.<span class="built_in">test</span>-hunhe&#123;.border-03(),width:200px;height:200px&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h4><p>less中想声明一个变量的话一定要用@开头，例如：@w：20px； width:@w;  </p><h4 id="5-运算（less中的运算-）"><a href="#5-运算（less中的运算-）" class="headerlink" title="5.运算（less中的运算 +-*/）"></a>5.运算（less中的运算 +-*/）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">test</span>:200px;</div><div class="line">.box-01&#123;width:@<span class="built_in">test</span>-20;&#125;;   //less中一个带单位,另一个可以不写单位； 180px</div><div class="line">.box-01&#123;width:@<span class="built_in">test</span>-20*5;&#125;;   100px</div><div class="line">.box-01&#123;width:(@<span class="built_in">test</span>-20)*5;&#125;    //加（）提高优先级</div></pre></td></tr></table></figure><h4 id="6-arguments-变量"><a href="#6-arguments-变量" class="headerlink" title="6.@arguments 变量"></a>6.@arguments 变量</h4><p><strong>@arguments包含了所有传递进来的参数</strong><br>如果你不想单独处理每一个参数的话就可以像这样写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.border-arg(@w:5px,@xx:solid,@c:black)&#123;</div><div class="line">    border:@arguments;</div><div class="line">  &#125;</div><div class="line">.<span class="built_in">test</span>-arg&#123;</div><div class="line">    .border-arg(10px);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><h4 id="7-z-less-库中的常见用法"><a href="#7-z-less-库中的常见用法" class="headerlink" title="7.z.less 库中的常见用法"></a>7.z.less 库中的常见用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.fl();           //<span class="built_in">float</span>:left</div><div class="line">.fr();           //<span class="built_in">float</span>:right</div><div class="line">.clearfix();     //clear:both;</div><div class="line">.bc()            //margin:0 auto;   </div><div class="line">.rel();          //position:relative</div><div class="line">.abs();          //position:absolate</div><div class="line">.fix();          //position:fixed;</div><div class="line">.h100();         //height:100%;</div><div class="line">.l-h(100px);     //line-height:100px;</div><div class="line">.d-b();          //display:block</div><div class="line">.d-i();          //display:inline</div><div class="line">.d-ib();         //display:inline-block</div><div class="line">.font-fm();      //font-family:<span class="string">"Microsoft Yahei"</span>,<span class="string">"微软雅黑"</span>;</div><div class="line">.font<span class="_">-s</span>(14px);   //font-size:14px;(默认12px)</div><div class="line">.font-wb();      //font-weight:bold;</div><div class="line">.tl();           //text-align:left</div><div class="line">.tc();           //text-align:center</div><div class="line">.tr();           //text-align:right;</div><div class="line">.opa(50)         //opacity:0.5; (默认值80)</div><div class="line">.<span class="built_in">bg</span>(<span class="string">"../img/logo.png"</span>,@x:0,@y:0) </div><div class="line"> //background:url(<span class="string">'../img/logo.png'</span>) 0 0 no-repeat</div><div class="line">.ellipsis()      </div><div class="line">//文字省略号 ( )内部使用百分比，例如.ellipsis(8) 出来的结果就是width:92%;</div><div class="line">.border-radius(10px)    //border-radius:10px(默认值:5px)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h4 id=&quot;1-在less中引入另一个less文件&quot;&gt;&lt;a href=&quot;#1-在less中引入另一个less文件&quot; class=&quot;headerlink&quot; title=&quot;1.在less中引入另一个less文件&quot;&gt;&lt;/a&gt;1.在less中引入另一个less文件&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@import &lt;span class=&quot;string&quot;&gt;&quot;ku&quot;&lt;/span&gt;;    //引入的是（ku.less）文件;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;在less中引入一个css文件&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@import(less) &lt;span class=&quot;string&quot;&gt;&quot;a.css&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://xjnblog.site/categories/css/"/>
    
    
      <category term="less" scheme="http://xjnblog.site/tags/less/"/>
    
      <category term="css" scheme="http://xjnblog.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0正确地引用 jquery 和 jquery-ui的插件</title>
    <link href="http://xjnblog.site/2017/09/22/vue2-0%E6%AD%A3%E7%A1%AE%E5%9C%B0%E5%BC%95%E7%94%A8-jquery-%E5%92%8C-jquery-ui%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
    <id>http://xjnblog.site/2017/09/22/vue2-0正确地引用-jquery-和-jquery-ui的插件/</id>
    <published>2017-09-22T10:41:28.000Z</published>
    <updated>2017-09-22T10:50:28.997Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1506087396765&amp;di=95111c466218831ceb52def469a6b667&amp;imgtype=0&amp;src=http%3A%2F%2Fjiuye-res.jikexueyuan.com%2Fzhiye%2Fshowcase%2Fattach-6ae2b991-803f-4b63-bda9-89434d70d665.jpg" alt=""><br>出自:  <a href="http://www.itnose.net/detail/6647297.html" target="_blank" rel="external">http://www.itnose.net/detail/6647297.html</a><br>使用vue-cli构建的vue项目，webpack的配置文件是分散在很多地方的，而我们需要修改的是build/webpack.base.conf.js，修改两处的代码<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">// 在开头引入webpack，后面的plugins那里需要</div><div class="line">var webpack = require(<span class="string">'webpack'</span>)</div><div class="line">// resolve</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">   // 其他代码...</div><div class="line">   resolve: &#123;</div><div class="line">      extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>],</div><div class="line">      fallback: [path.join(__dirname, <span class="string">'../node_modules'</span>)],</div><div class="line">      <span class="built_in">alias</span>: &#123;</div><div class="line">          <span class="string">'src'</span>: path.resolve(__dirname, <span class="string">'../src'</span>),</div><div class="line">          <span class="string">'assets'</span>: path.resolve(__dirname, <span class="string">'../src/assets'</span>),</div><div class="line">          <span class="string">'components'</span>: path.resolve(__dirname, <span class="string">'../src/components'</span>),</div><div class="line"></div><div class="line">          // webpack 使用 jQuery，如果是自行下载的</div><div class="line">          // <span class="string">'jquery'</span>: path.resolve(__dirname, <span class="string">'../src/assets/libs/jquery/jquery.min'</span>),</div><div class="line">          // 如果使用NPM安装的jQuery</div><div class="line">          <span class="string">'jquery'</span>: <span class="string">'jquery'</span> </div><div class="line">      &#125;</div><div class="line">   &#125;,</div><div class="line"></div><div class="line">   // 增加一个plugins</div><div class="line">   plugins: [</div><div class="line">      new webpack.ProvidePlugin(&#123;</div><div class="line">          $: <span class="string">"jquery"</span>,</div><div class="line">          jQuery: <span class="string">"jquery"</span></div><div class="line">      &#125;)</div><div class="line">   ],</div><div class="line"></div><div class="line">   // 其他代码...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样就可以正确的使用jQuery了，比如我要引入Bootstrap，我们在vue的入口js文件src/main.js开头加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 使用Bootstrap</div><div class="line">import <span class="string">'./assets/libs/bootstrap/css/bootstrap.min.css'</span></div><div class="line">import <span class="string">'./assets/libs/bootstrap/js/bootstrap.min'</span></div></pre></td></tr></table></figure></p><h4 id="vue-cli-webpack全局引入jquery"><a href="#vue-cli-webpack全局引入jquery" class="headerlink" title="vue-cli webpack全局引入jquery"></a>vue-cli webpack全局引入jquery</h4><p>首先在package.json里加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies:&#123;</div><div class="line"> <span class="string">"jquery"</span> : <span class="string">"^2.2.3"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后 nmp install  </p><p>在webpack.base.conf.js里加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var webpack = require(<span class="string">"webpack"</span>)</div></pre></td></tr></table></figure></p><p>在module.exports的最后加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line"> new webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>),</div><div class="line"> new webpack.ProvidePlugin(&#123;</div><div class="line">     jQuery: <span class="string">"jquery"</span>,</div><div class="line">     $: <span class="string">"jquery"</span></div><div class="line"> &#125;)</div><div class="line">]</div></pre></td></tr></table></figure></p><p>然后一定要重新 run dev<br>在main.js 引入就ok了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import $ from <span class="string">'jquery'</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1506087396765&amp;amp;di=95111c466218831ceb52def469a6b667&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fjiuye-res.jikexueyuan.com%2Fzhiye%2Fshowcase%2Fattach-6ae2b991-803f-4b63-bda9-89434d70d665.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;出自:  &lt;a href=&quot;http://www.itnose.net/detail/6647297.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.itnose.net/detail/6647297.html&lt;/a&gt;&lt;br&gt;使用vue-cli构建的vue项目，webpack的配置文件是分散在很多地方的，而我们需要修改的是build/webpack.base.conf.js，修改两处的代码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://xjnblog.site/categories/vue/"/>
    
    
      <category term="vue" scheme="http://xjnblog.site/tags/vue/"/>
    
      <category term="jquery" scheme="http://xjnblog.site/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>this、call、apply、bind</title>
    <link href="http://xjnblog.site/2017/09/22/this%E3%80%81call%E3%80%81apply%E3%80%81bind/"/>
    <id>http://xjnblog.site/2017/09/22/this、call、apply、bind/</id>
    <published>2017-09-22T07:48:16.000Z</published>
    <updated>2017-09-27T03:05:40.774Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://user-gold-cdn.xitu.io/2017/9/19/54a85be5d884cf40ef12c15be4c3d885?imageView2/1/w/1200/h/700/q/85/interlace/1&amp;quot" alt=""><br>这又是一个面试经典问题~/(ㄒoㄒ)/~~也是 ES5中众多坑中的一个，在 ES6 中可能会极大避免 this 产生的错误，但是为了一些老代码的维护，最好还是了解一下 this 的指向和 call、apply、bind 三者的区别。<br><a id="more"></a></p><h3 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h3><p>在 ES5 中，其实 this 的指向，始终坚持一个原理：<strong>this 永远指向最后调用它的那个对象，</strong>来，跟着我朗读三遍：<strong>this 永远指向最后调用它的那个对象，this 永远指向最后调用它的那个对象，this 永远指向最后调用它的那个对象。</strong>记住这句话，this 你已经了解一半了。</p><p>下面我们来看一个最简单的例子：<br>例 1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">a</span></span>() &#123;</div><div class="line">    var name = <span class="string">"Cherry"</span>;</div><div class="line">    console.log(this.name);          // windowsName</div><div class="line">    console.log(<span class="string">"inner:"</span> + this);    // inner: Window</div><div class="line">&#125;</div><div class="line">a();</div><div class="line">console.log(<span class="string">"outer:"</span> + this)         // outer: Window</div></pre></td></tr></table></figure><p>这个相信大家都知道为什么 log 的是 windowsName，因为根据刚刚的那句话“<strong>this 永远指向最后调用它的那个对象</strong>”，我们看最后调用 <code>a</code> 的地方 <code>a()</code>;，前面没有调用的对象那么就是全局对象 window，这就相当于是 <code>window.a()</code>；注意，这里我们没有使用严格模式，如果使用严格模式的话，全局对象就是 <code>undefined</code>，那么就会报错 <code>Uncaught TypeError: Cannot read property &#39;name&#39; of undefined</code>。  </p><p>再看下这个例子：<br>例 2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line">var a = &#123;</div><div class="line">    name: <span class="string">"Cherry"</span>,</div><div class="line">    fn : <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name);      // Cherry</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">a.fn();</div></pre></td></tr></table></figure></p><p>在这个例子中，函数 fn 是对象 a 调用的，所以打印的值就是 a 中的 name 的值。是不是有一点清晰了呢~   </p><p>我们做一个小小的改动：<br>例 3：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line">    var a = &#123;</div><div class="line">        name: <span class="string">"Cherry"</span>,</div><div class="line">        fn : <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            console.log(this.name);      // Cherry</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    window.a.fn();</div></pre></td></tr></table></figure></p><p>这里打印 Cherry 的原因也是因为刚刚那句话“this 永远指向最后调用它的那个对象”，最后调用它的对象仍然是对象 a。  </p><p>我们再来看一下这个例子：<br>例 4：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line">var a = &#123;</div><div class="line">    // name: <span class="string">"Cherry"</span>,</div><div class="line">    fn : <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name);      // undefined</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">window.a.fn();</div></pre></td></tr></table></figure></p><p>这里为什么会打印 <code>undefined</code> 呢？这是因为正如刚刚所描述的那样，调用 fn 的是 a 对象，也就是说 fn 的内部的 this 是对象 a，而对象 a 中并没有对 name 进行定义，所以 log 的 <code>this.name</code> 的值是 <code>undefined</code>。  </p><p>这个例子还是说明了：<strong>this 永远指向最后调用它的那个对象</strong>，因为最后调用 fn 的对象是 a，所以就算 a 中没有 name 这个属性，也不会继续向上一个对象寻找 <code>this.name</code>，而是直接输出 <code>undefined</code>。  </p><p>再来看一个比较坑的例子：<br>例 5：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line">var a = &#123;</div><div class="line">    name : null,</div><div class="line">    // name: <span class="string">"Cherry"</span>,</div><div class="line">    fn : <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name);      // windowsName</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var f = a.fn;</div><div class="line">f();</div></pre></td></tr></table></figure></p><p>这里你可能会有疑问，为什么不是 <code>Cherry</code>，这是因为虽然将 a 对象的 fn 方法赋值给变量 f 了，但是没有调用，再接着跟我念这一句话：“<strong>this 永远指向最后调用它的那个对象</strong>”，由于刚刚的 f 并没有调用，所以 <code>fn()</code> 最后仍然是被 window 调用的。所以 this 指向的也就是 window。  </p><p>由以上五个例子我们可以看出，this 的指向并不是在创建的时候就可以确定的，在 es5 中，永远是<strong>this 永远指向最后调用它的那个对象</strong>。</p><p>再来看一个例子：<br>例 6：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>() &#123;</div><div class="line">    var name = <span class="string">'Cherry'</span>;</div><div class="line">    innerFunction();</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">innerFunction</span></span>() &#123;</div><div class="line">        console.log(this.name);      // windowsName</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">fn()</div></pre></td></tr></table></figure></p><p>读到现在了应该能够理解这是为什么了吧(oﾟ▽ﾟ)o。</p><h3 id="怎么改变-this-的指向"><a href="#怎么改变-this-的指向" class="headerlink" title="怎么改变 this 的指向"></a>怎么改变 this 的指向</h3><p>改变 this 的指向我总结有以下几种方法：  </p><ul><li>使用 ES6 的箭头函数</li><li>在函数内部使用 <code>_this = this</code></li><li>使用 <code>apply</code>、<code>call</code>、<code>bind</code></li><li>new 实例化一个对象  </li></ul><p>例 7：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line">var a = &#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    func1: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name)     </div><div class="line">    &#125;,</div><div class="line">    func2: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        setTimeout(  <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            this.func1()</div><div class="line">        &#125;,100);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">a.func2()     // this.func1 is not a <span class="keyword">function</span></div></pre></td></tr></table></figure></p><p>在不使用箭头函数的情况下，是会报错的，因为最后调用 <code>setTimeout</code> 的对象是 window，但是在 window 中并没有 func1 函数。 </p><p>我们在改变 this 指向这一节将把这个例子作为 demo 进行改造。  </p><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>众所周知，ES6 的箭头函数是可以避免 ES5 中使用 this 的坑的。箭头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。  </p><p>例 8 ：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line">var a = &#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    func1: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name)     </div><div class="line">    &#125;,</div><div class="line">    func2: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        setTimeout( () =&gt; &#123;</div><div class="line">            this.func1()</div><div class="line">        &#125;,100);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">a.func2()     // Cherry</div></pre></td></tr></table></figure></p><h4 id="在函数内部使用-this-this"><a href="#在函数内部使用-this-this" class="headerlink" title="在函数内部使用 _this = this"></a>在函数内部使用 <code>_this = this</code></h4><p>如果不使用 ES6，那么这种方式应该是最简单的不会出错的方式了，我们是先将调用这个函数的对象保存在变量 <code>_this</code> 中，然后在函数中都使用这个 <code>_this</code>，这样 <code>_this</code> 就不会改变了。<br>例 9：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line">var a = &#123;</div><div class="line">    </div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    func1: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name)     </div><div class="line">    &#125;,</div><div class="line">    func2: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        var _this = this;</div><div class="line">        setTimeout( <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">            _this.func1()</div><div class="line">        &#125;,100);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">a.func2()       // Cherry</div></pre></td></tr></table></figure></p><p>这个例子中，在 func2 中，首先设置 <code>var _this = this;</code>，这里的 <code>this</code> 是调用 <code>func2</code> 的对象 a，为了防止在 func2 中的 setTimeout 被 window 调用而导致的在 setTimeout 中的 this 为 window。我们将 <code>this(指向变量 a)</code> 赋值给一个变量 <code>_this</code>，这样，在 <code>func2</code> 中我们使用 <code>_this</code> 就是指向对象 a 了。</p><h4 id="使用-apply、call、bind"><a href="#使用-apply、call、bind" class="headerlink" title="使用 apply、call、bind"></a>使用 apply、call、bind</h4><p>使用 apply、call、bind 函数也是可以改变 this 的指向的，原理稍后再讲，我们先来看一下是怎么实现的：  </p><h5 id="使用-apply"><a href="#使用-apply" class="headerlink" title="使用 apply"></a>使用 apply</h5><p>例 10：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    func1: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name)</div><div class="line">    &#125;,</div><div class="line">    func2: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        setTimeout(  <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            this.func1()</div><div class="line">        &#125;.apply(a),100);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">a.func2()            // Cherry</div></pre></td></tr></table></figure></p><h5 id="使用-call"><a href="#使用-call" class="headerlink" title="使用 call"></a>使用 call</h5><p>例 11：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    func1: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name)</div><div class="line">    &#125;,</div><div class="line">    func2: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        setTimeout(  <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            this.func1()</div><div class="line">        &#125;.call(a),100);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">a.func2()            // Cherry</div></pre></td></tr></table></figure></p><h5 id="使用-bind"><a href="#使用-bind" class="headerlink" title="使用 bind"></a>使用 bind</h5><p>例 12：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    func1: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name)</div><div class="line">    &#125;,</div><div class="line">    func2: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        setTimeout(  <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            this.func1()</div><div class="line">        &#125;.<span class="built_in">bind</span>(a)(),100);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">a.func2()            // Cherry</div></pre></td></tr></table></figure></p><h3 id="apply、call、bind-区别"><a href="#apply、call、bind-区别" class="headerlink" title="apply、call、bind 区别"></a>apply、call、bind 区别</h3><p>刚刚我们已经介绍了 apply、call、bind 都是可以改变 this 的指向的，但是这三个函数稍有不同。  </p><p>在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">MDN</a> 中定义 apply 如下；  </p><blockquote><p>apply() 方法调用一个函数, 其具有一个指定的this值，以及作为一个数组（或类似数组的对象）提供的参数   </p></blockquote><p>语法：  </p><blockquote><p>fun.apply(thisArg, [argsArray])   </p></blockquote><ul><li>thisArg：在 fun 函数运行时指定的 this 值。需要注意的是，指定的 this 值并不一定是该函数执行时真正的 this 值，如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动指向全局对象（浏览器中就是window对象），同时值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的自动包装对象。  </li><li>argsArray：一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 fun 函数。如果该参数的值为null 或 undefined，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。浏览器兼容性请参阅本文底部内容。  </li></ul><h4 id="apply-和-call-的区别"><a href="#apply-和-call-的区别" class="headerlink" title="apply 和 call 的区别"></a>apply 和 call 的区别</h4><p>其实 apply 和 call 基本类似，他们的区别只是传入的参数不同。  </p><p>call 的语法为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</div><div class="line">`</div></pre></td></tr></table></figure></p><p>所以 apply 和 call 的区别是 call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。  </p><p>例 13：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a =&#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    fn : <span class="keyword">function</span> (a,b) &#123;</div><div class="line">        console.log( a + b)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var b = a.fn;</div><div class="line">b.apply(a,[1,2])     // 3</div></pre></td></tr></table></figure></p><p>例 14：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a =&#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    fn : <span class="keyword">function</span> (a,b) &#123;</div><div class="line">        console.log( a + b)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var b = a.fn;</div><div class="line">b.call(a,1,2)       // 3</div></pre></td></tr></table></figure></p><h4 id="bind-和-apply、call-区别"><a href="#bind-和-apply、call-区别" class="headerlink" title="bind 和 apply、call 区别"></a>bind 和 apply、call 区别</h4><p>我们先来将刚刚的例子使用 bind 试一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a =&#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    fn : <span class="keyword">function</span> (a,b) &#123;</div><div class="line">        console.log( a + b)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var b = a.fn;</div><div class="line">b.bind(a,1,2)</div></pre></td></tr></table></figure></p><p>我们会发现并没有输出，这是为什么呢，我们来看一下 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">MDN</a> 上的文档说明：  </p><blockquote><p>bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。</p></blockquote><p>所以我们可以看出，bind 是创建一个新的函数，我们必须要手动去调用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a =&#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    fn : <span class="keyword">function</span> (a,b) &#123;</div><div class="line">        console.log( a + b)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var b = a.fn;</div><div class="line">b.bind(a,1,2)()           // 3</div></pre></td></tr></table></figure></p><p>==================================== 更新==============================  </p><h3 id="JS-中的函数调用"><a href="#JS-中的函数调用" class="headerlink" title="JS 中的函数调用"></a>JS 中的函数调用</h3><p>如果不理解为什么 例 6 的 innerFunction 和 例 7 的 this 是指向 window 的，所以我就来补充一下 JS 中的函数调用。<br>例 6：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>() &#123;</div><div class="line">    var name = <span class="string">'Cherry'</span>;</div><div class="line">    innerFunction();</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">innerFunction</span></span>() &#123;</div><div class="line">        console.log(this.name);      // windowsName</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">fn()</div></pre></td></tr></table></figure></p><p>例 7：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line">var a = &#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    func1: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name)     </div><div class="line">    &#125;,</div><div class="line">    func2: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        setTimeout(  <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            this.func1()</div><div class="line">        &#125;,100);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">a.func2()     // this.func1 is not a <span class="keyword">function</span></div></pre></td></tr></table></figure></p><p>函数调用的方法一共有 4 种  </p><ol><li>作为一个函数调用</li><li>函数作为方法调用</li><li>使用构造函数调用函数</li><li>作为函数方法调用函数（call、apply）  </li></ol><h4 id="作为一个函数调用"><a href="#作为一个函数调用" class="headerlink" title="作为一个函数调用"></a>作为一个函数调用</h4><p>比如上面的 例 1：<br>例 1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">a</span></span>() &#123;</div><div class="line">    var name = <span class="string">"Cherry"</span>;</div><div class="line">    console.log(this.name);          // windowsName</div><div class="line">    console.log(<span class="string">"inner:"</span> + this);    // inner: Window</div><div class="line">&#125;</div><div class="line">a();</div><div class="line">console.log(<span class="string">"outer:"</span> + this)         // outer: Window</div></pre></td></tr></table></figure></p><p>这样一个最简单的函数，不属于任何一个对象，就是一个函数，这样的情况在 JavaScript 的在浏览器中的非严格模式默认是属于全局对象 window 的，在严格模式，就是 undefined。  </p><p>但这是一个全局的函数，很容易产生命名冲突，所以不建议这样使用。  </p><h4 id="函数作为方法调用"><a href="#函数作为方法调用" class="headerlink" title="函数作为方法调用"></a>函数作为方法调用</h4><p>所以说更多的情况是将函数作为对象的方法使用。比如例 2：<br>例 2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line">var a = &#123;</div><div class="line">    name: <span class="string">"Cherry"</span>,</div><div class="line">    fn : <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name);      // Cherry</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">a.fn();</div></pre></td></tr></table></figure></p><p>这里定义一个对象 <code>a</code>，对象 <code>a</code> 有一个属性（<code>name</code>）和一个方法（<code>fn</code>）。  </p><p>然后对象 <code>a</code> 通过 <code>.</code> 方法调用了其中的 fn 方法。  </p><p>然后我们一直记住的那句话“<strong>this 永远指向最后调用它的那个对象</strong>”，所以在 fn 中的 this 就是指向 a 的。  </p><h4 id="使用构造函数调用函数"><a href="#使用构造函数调用函数" class="headerlink" title="使用构造函数调用函数"></a>使用构造函数调用函数</h4><blockquote><p>如果函数调用前使用了 new 关键字, 则是调用了构造函数。<br>这看起来就像创建了新的函数，但实际上 JavaScript 函数是重新创建的对象：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 构造函数:</div><div class="line"><span class="keyword">function</span> myFunction(arg1, arg2) &#123;</div><div class="line">    this.firstName = arg1;</div><div class="line">    this.lastName  = arg2;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// This    creates a new object</div><div class="line">var a = new myFunction(<span class="string">"Li"</span>,<span class="string">"Cherry"</span>);</div><div class="line">a.lastName;                             // 返回 <span class="string">"Cherry"</span></div></pre></td></tr></table></figure><p>这就有要说另一个面试经典问题：new 的过程了，(ಥ_ಥ)<br>这里就简单的来看一下 new 的过程吧：<br>伪代码表示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = new myFunction(<span class="string">"Li"</span>,<span class="string">"Cherry"</span>);</div><div class="line">new myFunction&#123;</div><div class="line">    var obj = &#123;&#125;;</div><div class="line">    obj.__proto__ = myFunction.prototype;</div><div class="line">    var result = myFunction.call(obj,<span class="string">"Li"</span>,<span class="string">"Cherry"</span>);</div><div class="line">    <span class="built_in">return</span> typeof result === <span class="string">'obj'</span>? result : obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li>创建一个空对象 obj;</li><li>将新创建的空对象的隐式原型指向其构造函数的显示原型。</li><li>使用 call 改变 this 的指向</li><li>如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；如果返回值是一个新对象的话那么直接直接返回该对象。</li></ol><p>所以我们可以看到，在 new 的过程中，我们是使用 call 改变了 this 的指向。  </p><h4 id="作为函数方法调用函数"><a href="#作为函数方法调用函数" class="headerlink" title="作为函数方法调用函数"></a>作为函数方法调用函数</h4><blockquote><p>在 JavaScript 中, 函数是对象。</p><p>JavaScript 函数有它的属性和方法。<br>call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身  </p><p>在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 this 的值， 即使该参数不是一个对象。在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。  </p></blockquote><p>这个时候我们再来看例 6：<br>例 6：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>() &#123;</div><div class="line">    var name = <span class="string">'Cherry'</span>;</div><div class="line">    innerFunction();</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">innerFunction</span></span>() &#123;</div><div class="line">        console.log(this.name);      // windowsName</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">fn()</div></pre></td></tr></table></figure></p><p>这里的 innerFunction() 的调用是不是属于第一种调用方式：作为一个函数调用（它就是作为一个函数调用的，没有挂载在任何对象上，所以对于没有挂载在任何对象上的函数，在非严格模式下就是 window 调用的）  </p><p>然后再看一下 例 7：<br>例 7：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var name = <span class="string">"windowsName"</span>;</div><div class="line">var a = &#123;</div><div class="line">    name : <span class="string">"Cherry"</span>,</div><div class="line">    func1: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(this.name)     </div><div class="line">    &#125;,</div><div class="line">    func2: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        setTimeout(  <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            this.func1()</div><div class="line">        &#125;,100 );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">a.func2()     // this.func1 is not a <span class="keyword">function</span></div></pre></td></tr></table></figure></p><p>这个简单一点的理解可以理解为“<strong>匿名函数的 this 永远指向 window</strong>”，你可以这样想，还是那句话this 永远指向最后调用它的那个对象，那么我们就来找最后调用匿名函数的对象，这就很尴尬了，因为匿名函数名字啊，笑哭，所以我们是没有办法被其他对象调用匿名函数的。所以说 匿名函数的 this 永远指向 window。  </p><p>如果这个时候你要问，那匿名函数都是怎么定义的，首先，我们通常写的匿名函数都是自执行的，就是在匿名函数后面加 <code>()</code> 让其自执行。其次就是虽然匿名函数不能被其他对象调用，但是可以被其他函数调用啊，比如例 7 中的 setTimeout。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/9/19/54a85be5d884cf40ef12c15be4c3d885?imageView2/1/w/1200/h/700/q/85/interlace/1&amp;amp;quot&quot; alt=&quot;&quot;&gt;&lt;br&gt;这又是一个面试经典问题~/(ㄒoㄒ)/~~也是 ES5中众多坑中的一个，在 ES6 中可能会极大避免 this 产生的错误，但是为了一些老代码的维护，最好还是了解一下 this 的指向和 call、apply、bind 三者的区别。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xjnblog.site/categories/JavaScript/"/>
    
    
      <category term="js" scheme="http://xjnblog.site/tags/js/"/>
    
      <category term="前端" scheme="http://xjnblog.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="原声js" scheme="http://xjnblog.site/tags/%E5%8E%9F%E5%A3%B0js/"/>
    
  </entry>
  
</feed>
